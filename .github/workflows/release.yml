name: Run Radio Discord Bot
on:
  push:
    branches:
      - master
jobs:
  deploy:
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - List files
        run: |
          echo "Root directory contents:"
          ls -la
          echo "Deployment directory contents:"
          ls -la deployment/

      - name: Stop existing containers
        run: |
          cd deployment && docker compose -f docker-compose.yml down || true

      - name: Remove old images
        run: |
          cd deployment && docker rmi radiodiscordbot:latest || true

      - name: Create .env file
        run: |
          cd deployment
          echo "POSTGRES_DB=radiobot" > .env
          echo "POSTGRES_USER=radiouser" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}" >> .env
          echo "SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}" >> .env
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> .env
          echo "WEBSITE_URL=${{ secrets.WEBSITE_URL }}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
          echo "JWT_SETTINGS_SECRET=${{ secrets.JWT_SETTINGS_SECRET }}" >> .env
          echo "JWT_SETTINGS_INTERNAL_PASSWORD=${{ secrets.JWT_SETTINGS_INTERNAL_PASSWORD }}" >> .env
          echo "JWT_SETTINGS_ISSUER=${{ secrets.WEBSITE_URL }}" >> .env
          echo "JWT_SETTINGS_AUDIENCE=${{ secrets.WEBSITE_URL }}" >> .env

      - name: Build and run with Docker Compose
        run: |
          cd deployment && docker compose -f docker-compose.yml up -d --build
