trigger:
  branches:
    include:
      - master

pool:
  name: "Self Hosted Agent"
  demands:
    - agent.name -equals raspberrypi

variables:
  - group: "discord-bot"
  - name: isFirstDeployment
    value: "false" # In azure pipeline, boolean variables are not supported. So, we use 'true' and 'false' as strings
  - name: dotnetVersion
    value: "8.x"
  - name: project
    value: "**/radio-discord-bot.csproj"

parameters:
  - name: buildConfiguration
    displayName: "Build Configuration"
    type: string
    default: "Release"

stages:
  - stage: Build
    displayName: "Build"
    jobs:
      - job: BuildApplication
        steps:
          - task: UseDotNet@2
            inputs:
              version: "$(dotnetVersion)"
              includePreviewVersions: true
            displayName: "Use .NET 8.x"

          - task: DotNetCoreCLI@2
            inputs:
              command: "restore"
              projects: "$(project)"
            displayName: "Restore NuGet Packages"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "$(project)"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build the application"

          - task: DotNetCoreCLI@2
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "$(project)"
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --self-contained true"
            displayName: "Publish the application"

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
              artifactName: "$(Build.buildnumber)"
            displayName: "Publish Build Artifacts"

  - stage: Deploy
    displayName: "Deploy"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build
    jobs:
      - job: Deploy
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "$(Build.buildnumber)"
              downloadPath: "$(System.ArtifactsDirectory)"
            displayName: "Download Build Artifacts"

            # -o to overwrite the files if they already exist, otherwise it will error out
          - script: |
              cp $(System.ArtifactsDirectory)/$(build.buildnumber)/s.zip /home/stand/applications/discord-bot
              cd /home/stand/applications/discord-bot
              unzip -o s.zip 
              rm s.zip
            displayName: "Extracting and copying the files"

          - script: |
              cd /home/stand/applications/discord-bot
              jq --arg token "$(BotToken)" '.BotToken = $token' appsettings.json > temp.json && mv temp.json appsettings.json
              jq --arg clientId "$(SpotifySettings.ClientId)" '.SpotifySettings.ClientId = $clientId' appsettings.json > temp.json && mv temp.json appsettings.json
              jq --arg clientSecret "$(SpotifySettings.ClientSecret)" '.SpotifySettings.ClientSecret = $clientSecret' appsettings.json > temp.json && mv temp.json appsettings.json
#              no longer in use since we're getting the token from the pipeline now
#              jq -s '.[0] + .[1]' appsettings.json ../discord-bot-token.json > temp.json && mv temp.json appsettings.json
            displayName: "Appending token to the appsetting.json file"

          - script: |
              sudo systemctl restart radio-discord-bot.service
            displayName: "Restarting the service"
