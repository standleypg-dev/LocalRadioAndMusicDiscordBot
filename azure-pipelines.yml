trigger:
  branches:
    include:
      - master

pool:
  name: Default
  demands:
    - agent.name -equals raspberrypi

# The 'isFirstDeployment' variable is used to determine if this is the first deployment or not
# If it is set to 'true', it will create and install the necessary dependencies and service for the first time
# If it is set to 'false', it will only update the service with the new code
variables:
  - group: "personal_website"
  - name: isFirstDeployment
    value: "true" # In azure pipeline, boolean variables are not supported. So, we use 'true' and 'false' as strings
  - name: dotnetVersion
    value: "8.x"
  - name: project
    value: "**/radio-discord-bot.csproj"

parameters:
  - name: buildConfiguration
    displayName: "Build Configuration"
    type: string
    default: "Release"

stages:
  - stage: Build
    displayName: "Build"
    jobs:
      - job: BuildApplication
        steps:
          - task: UseDotNet@2
            inputs:
              version: "$(dotnetVersion)"
              includePreviewVersions: true
            displayName: "Use .NET 8.x"

          - task: DotNetCoreCLI@2
            inputs:
              command: "restore"
              projects: "$(project)"
            displayName: "Restore NuGet Packages"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "$(project)"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build the application"

          - task: DotNetCoreCLI@2
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: "$(project)"
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --self-contained true"
            displayName: "Publish the application"

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
              artifactName: "$(Build.buildnumber)"
            displayName: "Publish Build Artifacts"

  - stage: Deploy
    displayName: "Deploy"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build
    jobs:
      - job: Deploy
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "$(Build.buildnumber)"
              downloadPath: "$(System.ArtifactsDirectory)"
            displayName: "Download Build Artifacts"

          - script: |
              sudo apt update && sudo apt upgrade
              sudo  apt install jq zip unzip
              sudo systemctl stop radio-discord-bot.service
              sudo rm -rf /home/stand/applications/discord-bot/*
              sudo systemctl start radio-discord-bot.service
            condition: eq(variables['isFirstDeployment'], 'false')
            displayName: "Stop the service and remove the old files"

            # -o to overwrite the files if they already exist, otherwise it will error out
          - script: |
              cp $(System.ArtifactsDirectory)/$(build.buildnumber)/s.zip /home/stand/applications/discord-bot
              cd /home/stand/applications/discord-bot
              unzip -o s.zip 
              rm s.zip
            displayName: "Extracting and copying the files"

          - script: |
              cd /home/stand/applications/discord-bot
              jq -s '.[0] + .[1]' appsettings.json ../discord-bot-token.json > temp.json && mv temp.json appsettings.json
            displayName: "Appending token to the appsetting.json file"

  - stage: InstallService
    displayName: "Install Service"
    condition: eq(variables['isFirstDeployment'], 'true')
    dependsOn: Deploy
    jobs:
      - job: InstallService
        steps:
          - script: |
              echo "COMMAND: cd /home/stand/applications/discord-bot"
              cd /home/stand/applications/discord-bot
              echo "COMMAND: wget https://downloads.xiph.org/releases/opus/opus-1.5.2.tar.gz && tar -zxvf opus-1.5.2.tar.gz"
              wget https://downloads.xiph.org/releases/opus/opus-1.5.2.tar.gz && tar -zxvf opus-1.5.2.tar.gz
              echo "COMMAND: wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.20-stable.tar.gz && tar -zxvf libsodium-1.0.20-stable.tar.gz"
              wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.20-stable.tar.gz && tar -zxvf libsodium-1.0.20-stable.tar.gz
              echo "COMMAND: cd opus-1.5.2 && ./configure --prefix=/usr/local && make && sudo make install"
              cd opus-1.5.2 && ./configure --prefix=/usr/local && make && sudo make install
              echo "COMMAND: cp /usr/local/lib/libopus.so /home/stand/applications/discord-bot"
              cp /usr/local/lib/libopus.so /home/stand/applications/discord-bot 
              echo "COMMAND: cd ../libsodium-stable && ./configure --prefix=/usr/local && make && sudo make install"
              cd ../libsodium-stable && ./configure --prefix=/usr/local && make && sudo make install
            displayName: "Install required linux libraries"

      #     - script: |
      #         cd /home/stand/applications/discord-bot
      #         echo "[Unit]
      #         Description=cmdb service
      #         After=network-online.target

      #         [Service]
      #         ExecStart=/home/staging/DotnetService/cmdb/cmdb_ws
      #         Type=simple
      #         Restart=always
      #         RestartSec=1
      #         WorkingDirectory=/home/staging/DotnetService/cmdb
      #         KillMode=process
      #         User=your-username #need to specify the user here if not in root (because some application you can run it as root)

      #         [Install]
      #         WantedBy=default.target" > testHere
      #       displayName: "Install and start the service"
      #       condition: eq(variables['isFirstDeployment'], 'true')
